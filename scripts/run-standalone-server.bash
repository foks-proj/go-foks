#!/bin/bash

set -e -o pipefail

hostname=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--hostname)
            shift
            hostname=$1
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
    shift
done

env_sh="env.sh"
top=".go-foks-src-top"
foks_tool_docker="ghcr.io/foks-proj/foks-tool:latest"
srcdir=$(realpath $(dirname $0)/..)
topdir=$(realpath $(pwd))
dbport=54320

foks_tool() {
    docker run --rm "$foks_tool_docker" "$@"
}

check_not_in_source_dir() {(
    for (( i=0; i<250; i++ )); do
        if [ -f "$top" ]; then
            echo "This script should not be run from the source directory."
            exit 1
        fi
        if [ $(pwd) = "/" ]; then
            return
        fi
        cd ..
    done
    echo "Stuck in a symlink loop; aborting."
    exit 1
)}

check_prereqs() {
    if ! command -v docker &> /dev/null; then
        echo "Docker is required but not installed. Please install Docker and try again."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null; then
        echo "docker-compose is required but not installed. Please install docker-compose and try again."
        exit 1
    fi
}

mkpw() {
    local num=$1
    if ! [[ $num =~ ^[0-9]+$ ]]; then
        echo "Error: Argument to rand must be a number."
        exit 1
    fi
    foks_tool random -b 62 -n "$num" --log-level warn
}

mkscrt() {
    local num=$1
    if ! [[ $num =~ ^[0-9]+$ ]]; then
        echo "Error: Argument to mkscrt must be a number."
        exit 1
    fi
    foks_tool random -b 62 -n "$num" --log-level warn
}


do_setup() {
    if [ -f "$env_sh" ]; then
        return 
    fi
    if [ -z "$hostname" ]; then
        echo "Hostname is required for initial setup. Use -h or --hostname to specify it."
        exit 1
    fi
    echo "Writing a new $env_sh file with hostname: $hostname"

    dbpw=$(mkpw 13)

    cat <<EOF > "$env_sh"
# This file is auto-generated by scripts/run-standalone-server.bash
export PRIMARY_HOSTNAME="$hostname"
export DBPW_ROOT=$(mkpw 13)
export DBPW_FOKS=${dbpw}
export SRCDIR=${srcdir}
export TOPDIR=${topdir}
export DBPORT=${dbport}
EOF
    mkdir -p conf/

    echo "Writing a new conf/local.pre.libsonnet"
    cat <<EOF > conf/local.pre.libsonnet
local base(o) = o + {
    top_dir : "${topdir}/",
    db +: {
        password : "${dbpw}",
        port : ${port},
        host : "localhost",
        'no-tls' : true,
    },
    external_addr : "${hostname}",
    bind_addr_ext : "0.0.0.0"
};
local final(o) = o;
{ base : base, final : final }
EOF

    echo "Writing a new conf/local.post.libsonnet"
    cat <<EOF > conf/local.post.libsonnet
local final(o) = o + {
    cks : {
        enc_keys: [ "${mkscrt 32}" ],
    }
}
{ final: final }
EOF



}

src_env() {
    source "$env_sh"
}

check_args() {
    # If $hostname is non-empty AND doesn't match $PRIMARY_HOSTNAME, fail.
    if [[ -n $hostname && $hostname != $PRIMARY_HOSTNAME ]]; then
        cat <<EOF
Hostname in ${env_sh} ($PRIMARY_HOSTNAME) does not match the one provided ($hostname).
Please update the env.sh file or run the script with the correct hostname.
EOF
        exit 1
    fi
}

check_not_in_source_dir
check_prereqs
do_setup
src_env
check_args