package templates

import (
	"fmt"
	"github.com/foks-proj/go-foks/lib/core"
	proto "github.com/foks-proj/go-foks/proto/lib"
	"github.com/foks-proj/go-foks/server/shared"
	"github.com/foks-proj/go-foks/server/web/lib"
)

templ vhostUsagePill(u *lib.AdminPageData, swap string) {
	@leftColPill("vhost-usage-pill", swap) {
		<div>
			<h3 class="font-semibold text-slate-700 dark:text-slate-200">
				<a
					hx-trigger="click"
					hx-swap="innerHTML"
					hx-target="main#admin-main"
					hx-get="/admin/main"
					class="hover:underline hover:cursor-pointer"
					id="virtual-hosts"
				>
					Virtual Hosts
				</a>
			</h3>
		</div>
		<div class="m-1">
			<span class="text-slate-700 dark:text-slate-200">Plan: </span>
			<span>
				if u.UserPlan == nil || !u.UserPlan.IsLive() {
					<i>none active </i>
				} else {
					<a
						hx-trigger="click"
						hx-swap="innerHTML"
						hx-target="main#admin-main"
						hx-get={ "/admin/plans/active" }
						class="hover:underline hover:cursor-pointer active-plan"
					>
						{ u.UserPlan.Plan.DisplayName }
					</a>
				}
			</span>
		</div>
		<div class="m-1">
			<span class="text-slate-700 dark:text-slate-200">
				Linked Hosts:
			</span>
			<span>
				{ fmt.Sprintf("%d" , u.VHosts.NumHosts()) } / 
				<span id="max-teams">
					{ fmt.Sprintf("%d", u.UserPlan.MaxVHosts()) }
				</span>
			</span>
		</div>
		<div class="m-1">
			<span class="text-slate-700 dark:text-slate-200">
				Users:
			</span>
			<span>
				{ fmt.Sprintf("%d", u.VHosts.TotalUsers()) } /
				<span id="max-users">
					{ fmt.Sprintf("%d", u.UserPlan.MaxSeats()) }
				</span>
			</span>
		</div>
		<div class="m-1">
			<span class="text-slate-700 dark:text-slate-200">
				Î£ Disk Usage:
			</span>
			<span>
				{ 
      fmt.Sprintf("%s / %s",
        u.VHosts.TotalDiskUsage().HumanReadable(),
        u.UserPlan.QuotaString(),
      ) }
			</span>
		</div>
	}
}

templ vhostTableRow(a *lib.AdminPageData, row lib.VHostRow, mine bool) {
	<div class="vhost-row contents">
		<div>
			switch row.Stage {
				case proto.HostBuildStage_Complete:
					<span class="text-green-600">
						âœ“
					</span>
				case proto.HostBuildStage_Stage1, 
				     proto.HostBuildStage_Stage2a,
					proto.HostBuildStage_Stage2b:
					<span class="text-yellow-600">
						âš 
					</span>
			}
		</div>
		<div>
			<span>
				{ row.Name.String() }
			</span>
		</div>
		<div
			class="whitespace-nowrap hidden lg:block overflow-x-auto"
		>
			if !row.Id.Id.IsZero() {
				<span class="font-mono text-slate-600 dark:text-slate-400">
					{ row.Id.Id.StringErr() }
				</span>
			} else {
				<p class="italic text-slate-600 dark:text-slate-400">
					(no host ID yet)
				</p>
			}
		</div>
		<div class="whitespace-nowrap mr-2">
			<span>
				{ row.Usage.Disk.HumanReadable() }
			</span>
		</div>
		<div class="whitespace-nowrap">
			<span>
				{ fmt.Sprintf("%d %s", row.Usage.Users, lib.Pluralize("user", int(row.Usage.Users))) }
			</span>
		</div>
		<div>
			<button
				class="responsive-button edit-vhost-button disabled:opacity-20 standard p-1 text-center text-xs w-10 h-6"
				hx-trigger="click"
				hx-swap="innerHTML"
				hx-target="main#admin-main"
				id={ "button-edit-vhost-" + row.VHostID.DOMString() }
				hx-indicator={ "#spinner-edit-vhost-" + row.VHostID.DOMString() + "," + "#button-edit-vhost-" + row.VHostID.DOMString() }
				hx-get={ "/admin/vhost/" + row.VHostID.String() }
			>
				<span>edit</span>
				<img
					id={ "spinner-edit-vhost-" + row.VHostID.DOMString() }
					class="button-spinner htmx-indicator w-3 h-3"
					src="/static/img/bars-scale-fade.svg"
				/>
			</button>
		</div>
	</div>
}

templ vhostTableRowSet(a *lib.AdminPageData, rows []lib.VHostRow, mine bool) {
	for _, row := range rows {
		@vhostTableRow(a, row, mine)
	}
}

templ vhostDetailsError(a *lib.AdminPageData, r *lib.VHostRow) {
	<div class="vhost-details-row"></div>
}

templ vhostStage1or2(a *lib.AdminPageData, r *lib.VHostRow) {
	<div class="vhost-details-row">
		<div
			class="my-3 ml-4 mr-1 bg-green-100 dark:bg-green-900/30 border border-green-500 dark:border-green-400 p-2 text-xs rounded-sm dark:text-green-100"
			id="vhost-setup-status"
		>
			switch  {
				case r.Stage == proto.HostBuildStage_Stage1 && !r.IsCanned:
					<div class="text-left">
						Please set a CNAME mapping from:
					</div>
					<div class="text-center my-1 py-2 bg-white">
						<span class="font-mono">{ r.Name.String() }</span>
					</div>
					<div class="text-left">to:</div>
					<div class="text-center my-1 py-2 bg-white">
						<span class="font-mono" id="hosting-cname">{ r.Stem.String() }</span>
					</div>
					<div class="text-left">
						via your DNS provider.
					</div>
				case (r.Stage == proto.HostBuildStage_Stage2a || r.Stage ==  proto.HostBuildStage_Stage2b):
					<div class="text-left">
						<p>
							DNS resolution 
							<span class="font-mono">{ r.Name.String() }</span> â†’ 
							<span class="font-mono">{ r.Stem.String() }</span>
							verified. However, we failed to establish
							a Let's Encrypt certificate for this domain. Click refresh below to try again.
						</p>
					</div>
				default:
					<div class="text-left">
						<p>
							We are in the process of setting up your host. 
							Click refresh below to check the status.
						</p>
					</div>
			}
		</div>
		<div
			class="grid grid-cols-2 gap-3 text-sm"
		>
			<div class="text-center">
				<button
					id="button-check-vhost"
					class="rounded-sm border border-green-500 bg-green-100 p-1 text-center px-3 text-sm mb-1 w-32 h-8 responsive-button plan-button whitespace-nowrap"
					hx-get={ "/admin/vhost/" + r.VHostID.String() + "/check" }
					hx-swap="innerHTML"
					hx-target="main#admin-main"
					hx-indicator="#spinner-check-vhost,#button-check-vhost"
				>
					<span>ðŸ”„ Check Now</span>
					<img
						id="spinner-check-vhost"
						class="button-spinner htmx-indicator w-3 h-3"
						src="/static/img/bars-scale-fade.svg"
					/>
				</button>
			</div>
			<div class="text-center">
				<button
					class="rounded-sm border border-red-500 bg-red-400 p-1 text-center text-white px-3 text-sm mb-1 w-32 h-8 responsive-button plan-button whitespace-nowrap"
					hx-delete={ "admin/vhost/" + r.VHostID.String() }
					hx-target="main#admin-main"
					hx-swap="innerHTML"
					hx-confirm={ "Are you sure you want to delete " + r.Name.String() + "?" }
					hx-indicator="#spinner-delete-vhost,#button-delete-vhost"
					id="button-delete-vhost"
				>
					<span>ðŸ’€ Delete Host</span>
					<img
						id="spinner-delete-vhost"
						class="button-spinner htmx-indicator w-3 h-3"
						src="/static/img/bars-scale-fade.svg"
					/>
				</button>
			</div>
		</div>
		<div id="vhost-check-error"></div>
	</div>
}

templ VHostInviteCodeRow(a *lib.AdminPageData, r *lib.VHostRow, ic shared.MultiUseInviteCode) {
	<div
		id={ "invite-code-row-" + ic.Code.String() }
		class={ "contents " + core.Sel(ic.Valid, "", "invite-disabled") }
	>
		<div
			class="flex items-center"
		>
			<span
				class="text-sm invite-code"
			>
				{ ic.Code.String() }
			</span>
		</div>
		<div
			class="flex items-center whitespace-nowrap"
		>
			<span
				class="text-sm"
			>
				{ fmt.Sprintf("%d %s", ic.Uses, lib.Pluralize("use", ic.Uses)) }
			</span>
		</div>
		<div
			class="flex items-center"
		>
			if ic.Valid {
				<button
					id={ "delete-invite-button-" + ic.Code.String() }
					hx-delete={ "/admin/vhost/" + r.Id.Id.String() + "/invite/" + ic.Code.String() }
					hx-swap="outerHTML"
					hx-target={ "div#invite-code-row-" + ic.Code.String() }
					class="responsive-button delete-invite-button disabled:opacity:20 rounded-sm bg-gray-200 p-0 text-center text-sm w-4 h-4"
					hx-indicator={ "#delete-invite-spinner-" + ic.Code.String() + ",#delete-invite-button-" + ic.Code.String() }
				>
					<span>
						âœ–
					</span>
					<img
						id={ "delete-invite-spinner-" + ic.Code.String() }
						class="button-spinner htmx-indicator w-3 h-3 vhost-spinner"
						src="/static/img/bars-scale-fade.svg"
					/>
				</button>
			} else {
				<span class="text-sm">disabled</span>
			}
		</div>
	</div>
}

templ vhostNewInviteCode(a *lib.AdminPageData, r *lib.VHostRow) {
	<button
		id="new-invite-code"
		hx-post={ "/admin/vhost/" + r.Id.Id.String() + "/invite" }
		hx-target="div#invite-code-row-new"
		hx-swap="outerHTML"
		hx-indicator="button.new-invite-code,img.new-invite-code"
		class="responsive-button new-invite-code disabled:opacity:20 standard p-1 text-center text-xs w-36 h-6 mt-2 mb-2 whitespace-nowrap"
	>
		<span
			class="text-xs"
		>
			âž• New Invite Code
		</span>
		<img
			class="button-spinner htmx-indicator w-3 h-3 new-invite-code"
			src="/static/img/bars-scale-fade.svg"
		/>
	</button>
}

templ vhostNewInviteRowPlaceholderDiv() {
	<div id="invite-code-row-new"></div>
}

templ VHostNewInviteRow(a *lib.AdminPageData, r *lib.VHostRow, ic shared.MultiUseInviteCode) {
	@VHostInviteCodeRow(a, r, ic)
	@vhostNewInviteRowPlaceholderDiv()
}

templ VHostChangeUserViewershipForm(a *lib.AdminPageData, r *lib.VHostRow) {
	<form
		id="user-viewership"
		hx-patch={ "/admin/vhost/" + r.Id.Id.String() + "/user/viewership" }
		hx-swap="outerHTML"
		hx-target="div#form-vars"
		hx-indicator=".patch-viewership"
		class="p-0 m-0 flex items-start"
	>
		@VHostChangeUserViewershipFormInner(a, r)
		// Don't swap out the button with the hx-patch result, since it causes a blip/flicker
		<button
			id="submit"
			class="patch-viewership rounded-sm bg-sky-500 p-1 text-center text-white text-xs responsive-button w-16 h-6 mb-1 ml-2"
		>
			<span>update</span>
			<img
				class="patch-viewership button-spinner htmx-indicator w-3 h-3"
				src="/static/img/bars-scale-fade.svg"
			/>
		</button>
	</form>
}

templ VHostSSO(a *lib.AdminPageData, r *lib.VHostRow) {
	<div class="collapsible" id="sso">
		<form
			id="vhost-sso"
			hx-put={ "/admin/vhost/" + r.Id.Id.String() + "/sso" }
			hx-swap="outerHTML"
			hx-target="div#sso"
			hx-indicator=".put-sso"
			class="m-0"
		>
			<div>
				@VHostSSOToggle(a, r)
			</div>
			<div
				class={ "collapse-target" + core.Sel(r.Details.HasOAuth2SSO(), " open", "") }
			>
				@VHostSSOFormFields(a, r)
			</div>
		</form>
	</div>
}

templ VHostSSOToggle(a *lib.AdminPageData, r *lib.VHostRow) {
	<label class="text-sm inline-block whitespace-nowrap pr-1">
		<input
			type="checkbox"
			id="toggle-sso"
			name="toggle-sso"
			value="checked"
			class="align-middle disabled:opacity-50"
			checked?={ r.Details.HasOAuth2SSO() && a.CanDoSSO() }
			disabled?={ !a.CanDoSSO() || r.Details.HasOAuth2SSO() }
		/>
		<span
			class={ "align-middle " + core.Sel(a.CanDoSSO(), "", "opacity-50") }
		>
			{ core.Sel(r.Details.HasOAuth2SSO(), "Enabled", "Enable (OAuth2/OIDC)") }
			if !a.CanDoSSO() {
				(requires a plan upgrade)
			}
		</span>
	</label>
}

templ VHostSSOFormFields(a *lib.AdminPageData, r *lib.VHostRow) {
	<div class="w-full py-2">
		<div class="flex flex-wrap items-center">
			<div class="w-40 mr-2 my-1">
				<label class="p-1 w-full text-sm">OpenID Config URI:</label>
			</div>
			<div class="grow min-w-[20rem] w-auto">
				<input
					type="text"
					name="sso-oauth2-config-url"
					class="p-1 flex-1 border rounded-sm w-full text-sm"
					placeholder="e.g., http://x.co/application/o/myApp/.well-known/openid-configuration"
					value={ r.Details.OAuth2SSOConfigURL() }
				/>
			</div>
		</div>
		<div class="flex flex-wrap items-center my-1">
			<div class="w-40 mr-2 my-1">
				<label class="p-1 w-full text-sm">Client ID:</label>
			</div>
			<div class="grow min-w-[20rem] w-auto">
				<input
					type="text"
					name="sso-oauth2-client-id"
					class="p-1 flex-1 border rounded-sm w-full text-sm"
					placeholder="e.g., x2dp9lPJoWQ4tuxX4nbt"
					value={ r.Details.OAuth2SSOClientID() }
				/>
			</div>
		</div>
		<div class="flex flex-wrap items-center my-1">
			<div class="w-40 mr-2 my-1">
				<label class="p-1 w-full text-sm">Client Secret:</label>
			</div>
			<div class="grow min-w-[20rem] w-auto">
				<input
					type="text"
					name="sso-oauth2-client-secret"
					class="p-1 flex-1 border rounded-sm w-full text-sm"
					placeholder="leave blank for PKCE"
					value={ r.Details.OAuth2SSOClientSecret() }
				/>
			</div>
		</div>
		<div class="flex flex-wrap items-center my-1">
			<div class="w-40 mr-2 my-1">
				<label class="p-1 w-full text-sm">Redirect URI:</label>
			</div>
			<div class="grow min-w-[20rem] w-auto">
				<span
					class="p-1 px-2 bg-slate-200 dark:bg-slate-700 dark:text-slate-200 border rounded-sm text-sm"
					id="sso-callback-url"
				>
					{ r.Details.OAuth2CallbackURL.String() }
				</span>
			</div>
		</div>
		<div class="flex items-center mt-2">
			<button
				id="sso-submit"
				name="sso-submit"
				value="submit"
				class="put-sso rounded-sm bg-sky-500 p-1 text-center text-white text-xs 
								responsive-button w-16 h-6 mr-3"
			>
				<span>update</span>
				<img
					class="put-sso button-spinner htmx-indicator w-3 h-3"
					src="/static/img/bars-scale-fade.svg"
				/>
			</button>
			<button
				id="sso-disable"
				name="sso-disable"
				value="submit"
				class="put-sso rounded-sm bg-red-400 p-1 text-center text-white text-xs 
								responsive-button w-24 h-6"
			>
				<span>disable SSO</span>
				<img
					class="put-sso button-spinner htmx-indicator w-3 h-3"
					src="/static/img/bars-scale-fade.svg"
				/>
			</button>
		</div>
	</div>
}

templ VHostChangeUserViewershipFormInner(a *lib.AdminPageData, r *lib.VHostRow) {
	<div id="form-vars" class="contents">
		<select
			id="mode"
			name="mode"
			class="bg-slate-200 dark:bg-slate-700 dark:text-slate-200 p-1 px-2 text-xs text-center rounded-sm mb-1 h-6"
		>
			for _, vm := range lib.ValidUserViewershipModes {
				<option
					value={ vm.String() }
					selected?={ r.Details.Config.Viewership.User == vm.ViewershipMode }
				>
					{ vm.Desc }
				</option>
			}
		</select>
		<input type="hidden" id="current-val" value={ r.Details.Config.Viewership.User.String() }/>
	</div>
}

templ vhostDetailsMain(a *lib.AdminPageData, r *lib.VHostRow) {
	<div class="grid grid-cols-[min-content_auto] gap-x-4 mt-2 gap-y-2">
		<div class="vhost-details-row contents">
			<div class="whitespace-nowrap vhost-detail-cell"><span>Hosted Domain:</span></div>
			<div class="vhost-detail-cell"><span class="font-mono">{ r.Name.String() }</span> </div>
		</div>
		<div class="vhost-details-row contents">
			<div class="whitespace-nowrap vhost-detail-cell">
				<span>
					Hosted CNAME:
				</span>
			</div>
			<div class="vhost-detail-cell">
				<span class="font-mono">{ r.Stem.String() }</span>
			</div>
		</div>
		<div class="vhost-details-row contents">
			<div class="whitespace-nowrap vhost-detail-cell">
				<span>
					FOKS Host ID:
				</span>
			</div>
			<div class="vhost-detail-cell">
				<span class="font-mono">{ r.Id.Id.StringErr() }</span>
			</div>
		</div>
		<div class="vhost-details-row contents">
			<div class="whitespace-nowrap">Users:</div>
			<div>{ fmt.Sprintf("%d", r.Usage.Users) }</div>
			<div class="whitespace-nowrap vhost-detail-cell">Disk Usage:</div>
			<div class="vhost-detail-cell">{ r.Usage.Disk.HumanReadable() }</div>
		</div>
		<div class="vhost-details-row contents">
			<div class="vhost-detail-cell whitespace-nowrap">
				<span>User Viewership:</span>
			</div>
			<div class="vhost-detail-cell">
				@VHostChangeUserViewershipForm(a, r)
			</div>
		</div>
		<div class="vhost-details-row contents">
			<div class="vhost-detail-cell whitespace-nowrap">
				<span>Single Sign-On:</span>
			</div>
			<div class="vhost-detail-cell">
				@VHostSSO(a, r)
			</div>
		</div>
		<div class="vhost-details-row contents collapsible">
			<div class="vhost-detail-cell">
				<button class="collapse-toggle">
					<div class="w-3 text-left">
						<span
							class="collapse-toggle-img"
						>â–½</span>
					</div>
				</button>
				Invite Codes:
			</div>
			<div class="vhost-detail-cell">
				<div class="collapse-target open">
					<div class="grid grid-cols-[min-content_min-content_min-content] gap-y-2 gap-x-4">
						for _, ic := range r.Details.MultiUseInvites {
							@VHostInviteCodeRow(a, r, ic)
						}
						@vhostNewInviteRowPlaceholderDiv()
					</div>
					@vhostNewInviteCode(a, r)
				</div>
			</div>
		</div>
	</div>
}

templ VHostDetails(a *lib.AdminPageData, r *lib.VHostRow) {
	<div class="text-sm">
		<h3 class="font-semibold text-slate-700 dark:text-slate-200 mb-1">Manage Host</h3>
		<div class="ml-2">
			<div class="vhost-details-row">
				<h4 class="font-medium">{ r.Name.String() }</h4>
			</div>
			switch  {
				case r.Stage.IsBuilding():
					@vhostStage1or2(a, r)
				case r.Stage != proto.HostBuildStage_Complete:
					@vhostDetailsError(a, r)
				default:
					@vhostDetailsMain(a, r)
			}
		</div>
	</div>
}

templ VHostPostRes(a *lib.AdminPageData, args *lib.VHostAddArgs) {
	@VHostTableAdd(a, args)
	@vhostUsagePill(a, "outerHTML")
}

templ VHostsMain(a *lib.AdminPageData, addArgs *lib.VHostAddArgs) {
	@vHostsTable(a, addArgs)
	@vhostUsagePill(a, "outerHTML")
}

templ VHostTableAdd(a *lib.AdminPageData, args *lib.VHostAddArgs) {
	<form
		id="vhost-add"
		hx-post="/admin/vhost"
		hx-swap="innerHTML"
		hx-target="main#admin-main"
		hx-indicator=".vhost-spinner,.vhost-button"
	>
		<div
			class="grid grid-cols-[min-content_auto_min-content_min-content] gap-2 text-sm"
		>
			<div class="font-extrabold">
				+
			</div>
			<div>
				<div
					id="canned-input"
				>
					<input
						id="canned-name"
						name="canned-name"
						placeholder="your-host"
						type="text"
						class="text-xs w-32 text-right hostname-input rounded-sm border border-slate-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-200 p-1 hostname"
						minlength="3"
						maxlength="80"
					/>
					<span
						class="font-black"
					>.</span>
					<select
						class="bg-slate-200 dark:bg-slate-700 dark:text-slate-200 p-1 text-xs rounded-sm"
						id="canned-domain"
						name="canned-domain"
					>
						for _, h := range a.VHosts.CannedDomains {
							<option value={ h.String() }>{ h.String() } </option>
						}
					</select>
				</div>
				<div
					id="byod-input"
					class="hidden"
				>
					<input
						placeholder="foks.your.vanity.domain.cc"
						name="byod"
						id="full-vanity-hostname"
						type="text"
						class="text-xs w-56 text-left hostname-input p-1 border rounded-sm border-slate-400 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-200"
					/>
				</div>
			</div>
			<div
				class="flex justify-center"
			>
				<label
					class="text-xs inline-block whitespace-nowrap pr-1 mt-1"
				>
					<input
						type="checkbox"
						id="toggle-byod"
						class="align-middle"
						name="toggle-byod"
						value="checked"
						checked?={ args.IsBYOD }
					/>
					<span
						class="align-middle"
					>
						BYO domain
					</span>
				</label>
			</div>
			<div
				class="justify-center"
			>
				<button
					id="vhost-submit"
					class="rounded-sm bg-sky-500 p-1 text-center text-white text-xs responsive-button vhost-button w-10 h-6"
				>
					<span>add</span>
					<img
						id="spinner-vhost-add"
						class="button-spinner htmx-indicator w-3 h-3 vhost-spinner"
						src="/static/img/bars-scale-fade.svg"
					/>
				</button>
			</div>
		</div>
		if args.Err != nil {
			@VHostSetupError(*args.Err)
		} else {
			<div id="vhost-setup-error"></div>
		}
	</form>
}

templ vHostsTable(a *lib.AdminPageData, addArgs *lib.VHostAddArgs) {
	<div
		class="grid lg:grid-cols-[1rem_2fr_3fr_min-content_min-content_min-content] grid-cols-[1rem_1fr_min-content_min-content_min-content] gap-2 gap-x-3 text-sm mb-4"
		id="vhost-table"
	>
		@vhostTableRowSet(a, a.VHosts.Mine(), true)
		@vhostTableRowSet(a, a.VHosts.Theirs(), false)
	</div>
	@VHostTableAdd(a, addArgs)
}

templ VHostCheckError(err lib.VHostCheckError) {
	<div
		class="my-3 ml-4 mr-1 big-error"
		id="vhost-check-error"
	>
		<div class="text-left">
			<span class="font-bold text-red-700">Error:</span>
			<span class="">
				{ err.Error() }
			</span>
		</div>
	</div>
}

templ VHostSetupError(err lib.VHostSetupError) {
	<div
		class="my-3 ml-5 mr-1 big-error"
		id="vhost-setup-error"
	>
		switch te := err.Err.(type) {
			case core.HostInUseError:
				<span
					class="font-bold text-red-700"
				>Error:</span>
				<span>
					The host <span class="font-mono">{ te.Host.String() }</span> is already in use. 
					Please pick another.
				</span>
			case core.OverQuotaError:
				<span
					class="font-bold text-red-700"
				>Error:</span>
				<span>
					You have exceeded your quota. 
					Please delete some hosts or upgrade your plan.
				</span>
			default:
				{ err.Err.Error() }
		}
	</div>
}
