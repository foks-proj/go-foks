// Copyright (c) 2025 ne43, Inc.
// Licensed under the MIT License. See LICENSE in the project root for details.

@0xbe10d74adc50bcd7;

go:import "github.com/foks-proj/go-foks/proto/lib" as lib;

struct HostStatusPair {
    host @0 : lib.TCPAddr; // == "" if not found
    status @1 : lib.Status;
}

struct GetDefaultServerRes {
    bigTop @0 : HostStatusPair;         // BigTop is where most individuals and small teams wind up
    mgmt @1 : Option(HostStatusPair);   // Management if where to make new vhosts for larger teams
}

struct DeviceNagInfo {
    doNag @0 : Bool;
    numDevices @1 : Uint;
}

struct CliVersionPair {
    cli @0 : lib.SemVer;
    agent @1 : lib.SemVer;
}

struct UpgradeNagInfo {
    agent @1 : lib.SemVer;
    server @2 : lib.ServerClientVersionInfo;
}

enum NagType {
    None @0;
    TooFewDevices @1;
    ClientVersionCritical @2;
    ClientVersionUpgradeAvailable @3;
    ClientVersionClash @4;
}

variant UnifiedNag switch (t : NagType) {
    case TooFewDevices @1: DeviceNagInfo;
    case ClientVersionCritical,
        ClientVersionUpgradeAvailable @2: UpgradeNagInfo;
    case ClientVersionClash @3: CliVersionPair;
}

struct UnifiedNagRes {
    nags @0 : List(UnifiedNag);
}

enum RegServerType {
    None @0;
    Default @1;
    Mgmt @2;
    Custom @3;
}

protocol General 
    argHeader Header
    resHeader Header
    errors lib.Status @0xf6cc941b {

    probe @0 (
        addr @0 : lib.TCPAddr
    ) : ClientProbeArg -> lib.PublicZone;

    newSession @1 (
        sessionType @0 : lib.UISessionType
    ) -> lib.UISessionID;

    finishSession @2 (
        sessionId @0 : lib.UISessionID
    );

    getDefaultServer @3 (
        sessionId @0 : lib.UISessionID,
        timeout @1: lib.DurationMilli
    ) -> GetDefaultServerRes;

    putServer @4 (
        sessionId @0 : lib.UISessionID,
        server @1 : Option(lib.TCPAddr),
        timeout @2 : lib.DurationMilli,
        typ @3 : RegServerType
    ) -> lib.RegServerConfig;

    getActiveUser @5 () -> lib.UserContext;

    clearDeviceNag @7 ( val @0 : Bool );

    getUnifiedNags @8 (
        withRateLimit @0 : Bool,
        cv @1 : lib.ClientVersionExt
    ) -> UnifiedNagRes;

    // If true, snooze the upgrade nag at the current version for 2 weeks;
    // If false, remove the snooze and show the nag again.
    snoozeUpgradeNag @9 (
        val @0 : Bool,
        dur @1 : lib.DurationSecs
    );
}