// Copyright (c) 2025 ne43, Inc.
// Licensed under the MIT License. See LICENSE in the project root for details.

@0xf2f9ae5dfcd1c8e4;

go:import "github.com/foks-proj/go-foks/proto/lib" as lib;

enum SecretKeyBundleVersion {
    V1 @1;
}

variant SecretKeyBundle switch (v : SecretKeyBundleVersion) @0x8456933bbb8a54ae {
    case V1 @1 : lib.SecretSeed32;
}

enum SecretStoreVersion {
    V2 @2;
}

struct PassphraseEncryptedSecretKeyBundle {
    ppgen @0 : lib.PassphraseGeneration;
    salt @1 : lib.PassphraseSalt;
    stretchVersion @2: lib.StretchVersion;
    secretBox @3: lib.SecretBox;
}

// The 32-byte key for this secretBox is stored in the OS keychain, under
// server + account. The account is the base62-encoding of the fully-qualified
// user (meaning user + hostname). See lcl.SecretKeyKeychainLabelV2{}.StringErr().
// Service for now is always going to be "foks"
struct MacOSKeychainEncryptedSecretBundle {
    account @0 : Text;
    service @1 : Text;
    secretBox @2 : lib.SecretBox;
}

struct NoiseFileEncryptedSecretBundle {
    filename @0 : Text;
    secretBox @1 : lib.SecretBox;
}

struct KeychainEncryptedSecretBundle {
    service @1 : Text;
    secretBox @2 : lib.SecretBox;
}


variant StoredSecretKeyBundle switch (t : lib.SecretKeyStorageType) {
    case PLAINTEXT @0 : SecretKeyBundle;
    case ENC_PASSPHRASE @1 : PassphraseEncryptedSecretKeyBundle;
    case ENC_MACOS_KEYCHAIN @2 : MacOSKeychainEncryptedSecretBundle;
    case ENC_NOISE_FILE @3 : NoiseFileEncryptedSecretBundle;
    case ENC_KEYCHAIN @4 : KeychainEncryptedSecretBundle;
}

typedef SecretKeyBundleMinorVersion = Uint;

struct LabeledSecretKeyBundle {
    fqur @0 : lib.FQUserAndRole;
    keyID @1 : lib.DeviceID; // used as a sanity-check in the case of device revocation
    selfTok @2 : lib.PermissionToken; // For loading self after revocation
    bundle @3 : StoredSecretKeyBundle;
    provisional @4 : Bool; // If true, this key is not yet confirmed (added 2025.03.05)
    ctime @5 : lib.Time; // Creation time
    mtime @6 : lib.Time; // Modification time
    minorVersion @7 : SecretKeyBundleMinorVersion; // Incremented when necessary; local to the secretStore version above
}

struct FQUserRoleAndDeviceID {
    fqur @0 : lib.FQUserAndRole;
    keyID @1 : lib.DeviceID;
}

// If storing data in the macOS keychain about a secret key, this is how to
// label it. We need the LocalInstanceID to differentiate between two
// "home"dirs for FOKS
struct SecretKeyKeychainLabelV1 {
    liid @0 : lib.LocalInstanceID;
    fqur @1 : lib.FQUserAndRole;
}

struct SecretKeyKeychainLabelV2 {
    liid @0 : lib.LocalInstanceID;
    fqu @1 : lib.FQUser;
    did @2 : lib.DeviceID;
}

typedef SecretKeyKeychainLabelString = Text;

struct SecretStoreV2 {
    id @0 : lib.LocalInstanceID;
    keys @1 : List(LabeledSecretKeyBundle);
}

variant SecretStore switch (v : SecretStoreVersion) {
    case V2 @2 : SecretStoreV2;
}